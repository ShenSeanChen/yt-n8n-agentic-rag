name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm install -g n8n
        npm install -g @supabase/cli
    
    - name: Validate SQL files
      run: |
        echo "Validating SQL syntax..."
        # Basic SQL validation (PostgreSQL syntax)
        if command -v psql >/dev/null 2>&1; then
          echo "PostgreSQL client available for validation"
        else
          echo "PostgreSQL client not available, skipping SQL validation"
        fi
    
    - name: Validate n8n workflow
      run: |
        echo "Validating n8n workflow JSON..."
        python3 -c "import json; json.load(open('n8n-workflow.json'))"
        echo "‚úÖ n8n workflow JSON is valid"
    
    - name: Validate Docker Compose
      run: |
        echo "Validating docker-compose.yml..."
        docker-compose config
        echo "‚úÖ Docker Compose configuration is valid"
    
    - name: Check file permissions
      run: |
        echo "Checking file permissions..."
        if [ -x "setup-database.sh" ]; then
          echo "‚úÖ setup-database.sh is executable"
        else
          echo "‚ùå setup-database.sh is not executable"
          exit 1
        fi

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        docker build -t yt-n8n-agentic-rag:latest .
        echo "‚úÖ Docker image built successfully"
    
    - name: Test Docker Compose
      run: |
        echo "Testing Docker Compose configuration..."
        docker-compose config
        echo "‚úÖ Docker Compose configuration is valid"

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deployment would happen here"
        echo "This is where you would add your deployment steps"
        echo "Examples:"
        echo "- Deploy to cloud provider (AWS, GCP, Azure)"
        echo "- Update production environment"
        echo "- Send notifications"
